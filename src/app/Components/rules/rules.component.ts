import { RulesService } from './../../Services/rules.service';
import { CommonModule } from '@angular/common';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Component, OnInit } from '@angular/core';
import {  FormControl, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';
import { ActivatedRoute, Router, RouterModule } from '@angular/router';
import Swal from 'sweetalert2';
import { Irules } from '../../Models/irules';

@Component({
  selector: 'app-rules',
  standalone: true,
  imports: [
    RouterModule,
    FormsModule,
    CommonModule,
    HttpClientModule,
     ReactiveFormsModule,
    

  ],
  providers:[ RulesService],
  templateUrl: './rules.component.html',
  styleUrl: './rules.component.css'
})
export class RulesComponent implements OnInit {
Rule:any ;
RuleId:any;
UpdateRule:any ;
e: Event | undefined;

constructor(private http: HttpClient, private rulesService: RulesService, private router: Router, private activatedroute: ActivatedRoute) {
} 
  ngOnInit(): void {
    this.GetAllRules()
    this.RuleId=Number(this.activatedroute.snapshot.paramMap.get('id'));
    if (this.RuleId!=0) {
      this.rulesService.getByIdRules(this.RuleId).subscribe({
        next:(response)=>{
           this.Rule=response;
           this.addRules.controls['bonus'].setValue(this.Rule.bouns)
           this.addRules.controls['discound'].setValue(this.Rule.discound)
           this.addRules.controls['offDay1'].setValue(this.Rule.offDay1)
           this.addRules.controls['offDay2'].setValue(this.Rule.offDay2)
       
      }, error:(myError)=>{""}
    })
    
    }
  }


  addRules=new FormGroup({
    id : new FormControl(0, []),
    bonus :new FormControl(0, [
      Validators.required,
    ]),

    discound:new FormControl(0, [
      Validators.required,
    ]),

    offDay1 : new FormControl('', [
      Validators.required,
    
    ]),
    offDay2 : new FormControl('', [
      Validators.required,
    
    ])
   });
   
   
   get getBouns(){
    return this.addRules.controls['bonus'];
}

  get getDiscound(){
    return this.addRules.controls['discound'];
}
  get GetOffDayOne(){
    return this.addRules.controls['offDay1'];
  
}
get GetOffDayTwo(){
  return this.addRules.controls['offDay2'];

}

GetAllRules(){
  this.rulesService.getAllRules()
  .subscribe(
      (data1) => {
        
        this.Rule = data1;
        //console.log(data1)

      },
      (error) => {
        console.log(error);
      }
    );

}
AddRules() {
  if (this.getBouns && this.getDiscound && this.GetOffDayOne && this.GetOffDayTwo) {
    let rule: Irules = {
      id: 0, // Assuming id is generated by the server
      Bonus: this.addRules.value.bonus ?? "",
      Discound: this.addRules.value.discound ?? "",
      OffDay1: this.addRules.value.offDay1 ?? "",
      OffDay2: this.addRules.value.offDay2 ?? "",
      hR_id: null // Assuming hR_id is nullable and will be assigned by the server
      
    };
   
      this.rulesService.addRules(rule)
        .subscribe(
          (data) => {
             console.log(data);
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'Rule added successfully!'
            });
            this.GetAllRules();
            this.addRules.reset();
          },
          (error) => {
            console.log(error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to add rule.'
            });
          }
        );
    } 
  }




  
DeleteRule(id:any){
  Swal.fire({
    title: 'Are you sure?',
    text: 'You will not be able to recover this rule!',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Yes, delete it!',
    cancelButtonText: 'No, keep it'
  }).then((result)=>{
    if (result.isConfirmed) {
      this.rulesService.DeleteRule(id)
        .subscribe(
          (data) => {
            console.log(data);
            Swal.fire({
              icon: 'success',
              title: 'Success',
              text: 'rule deleted successfully!'
            });
            this.GetAllRules(); // Refresh the list after deletion
          },
          (error) => {
            console.log(error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to delete rule.'
            });
          }
        );
    }
  });





 

}

AddRuleToEmployee(id:any){
  this.rulesService.UseRule(id).subscribe(
    (data)=>{
      console.log(data);

     }
  )
}



}









    
    



